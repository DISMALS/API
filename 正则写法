function wl() {
  var values=Array.prototype.slice.call(arguments,0);
  self.document.write(values.join(' ') + '<br />'); //换行输出
}
var print=wl;
/*正则表达式的所有内容都在这里了*/
var text = "mom and dad and baby";
//如果使用new语句来构造正则表达式对象，则要表达一个"\"使用"\\\\"
var pattern = /mom( and dad( and baby)?)?/gi;
var matches = pattern.exec(text);
/*RegExp实例方法：
test(str)方法：检测str是否与此正则表达式的模式匹配
toLocaleString()方法：返回正则表达式对象的字面量，继承自Object
toString()方法：返回正则表达式对象的字面量，继承自Object
exec(str)方法：其返回值是一个特化的Array对象，
    其第0元素保存整个匹配，第1-n元素保存所有捕获到的捕获组
    另有index属性，保存此次匹配在原字符串中开始匹配的索引位置
        input属性，保存此次匹配要匹配的原字符串
    匹配失败时返回null，当对一个字符串多次匹配时，可通过判断返回值是
    否为null，来决定是否继续进行循环匹配。*/
print(pattern.test('hello world'));//false
print(pattern.test("mom and dad and baby"));//true
print(pattern.toLocaleString());//"/mom( and dad( and baby)?)?/gi"
print(pattern.toString());//"/mom( and dad( and baby)?)?/gi"
print(matches.index); //0
print(matches.input); //"mom and dad and baby"
print(matches[0]); //"mom and dad and baby"
print(matches[1]); //" and dad and baby"
print(matches[2]); //" and baby"
/*RegExp原型属性：它是全局的，被所有正则表达式对象共享，
test()方法与exec()方法都会填充RegExp的各个属性
input           $_ 最近一次要匹配的字符串。 Opera未实现此属性
lastMatch       $& 最近一次的匹配项。 Opera未实现此属性
lastParen       $+ 最近一次匹配的捕获组。 Opera未实现此属性
leftContext     $` input字符串中lastMatch之前的文本
multiline       $* 布尔值，表示是否所有表达式都使用多行模式。 IE和Opera未实现此属性
rightContext    $' Input字符串中lastMatch之后的文本
另外，还有RegExp.$1,RegExp.$2,...,RegExp.$9用于保存捕获组*/
print(RegExp.input);//"mom and dad and baby"
print(RegExp.lastMatch);//"mom and dad and baby"
print(RegExp.lastParen);//" and baby"
print(RegExp.leftContent);//''
print(RegExp.multiline);//false
print(RegExp.rightContent);//''
for(var i=1;i<10;i++)
    print(RegExp['$'+i]);
/*RegExp实例属性：
global：布尔值，表示是否设置了 g 标志。
ignoreCase：布尔值，表示是否设置了 i 标志。
lastIndex：整数，表示开始搜索下一个匹配项的字符位置，从 0 算起。
multiline：布尔值，表示是否设置了 m 标志。
source：正则表达式的字符串表示（不带模式如i,g,m），按照字面量形式而
        非传入构造函数中的字符串模式返回。*/
print(pattern.global);//true
print(pattern.ignoreCase);//true
print(pattern.lastIndex);//20
print(pattern.multiline);//false
print(pattern.source);//"mom( and dad( and baby)?)?"
/*题外话：JScript只能在IE上运行，所以它也不支持RegExp.multiline原型属性
          但它支持compile()方法，其exec()方法返回的数组多出一个lastIndex属性
          顿时觉得微软的这个私生子太丑了！！！*/
